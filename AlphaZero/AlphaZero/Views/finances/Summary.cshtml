@model Dictionary<int, Dictionary<int, Dictionary<string, double>>>

@{
    ViewBag.Title = "Summary";
}

<style>
    .footer-row {
        background-color: #f2f2f2;
        font-weight: bold;
        display: table-row !important;
    }

    .negative-profit {
        color: red;
    }

    .dt-buttons {
        margin-bottom: 10px;
    }

        .dt-buttons button:hover {
            opacity: 0.8;
        }

        .dt-buttons button {
            margin-left: 5px;
            padding: 6px 12px;
            border: none;
            border-radius: 4px;
            font-size: 14px;
            cursor: pointer;
        }

        .dt-buttons .buttons-csv {
            background-color: cornflowerblue;
            color: white;
        }

        .dt-buttons .buttons-excel {
            background-color: seagreen;
            color: white;
        }

        .dt-buttons .buttons-pdf {
            background-color: red;
            color: white;
        }

        .dt-buttons .buttons-print {
            background-color: #607d8b;
            color: white;
        }
</style>

<div class="row">
    <div class="col-md-12 grid-margin stretch-card">
        <div class="card">
            <div class="card-body">
                <div class="d-flex justify-content-between">
                    <p class="card-title mb-0" style="font-size: x-large;">Summary of Finance</p>
                    <select id="yearFilter" class="form-control col-3">
                        <option value="">All</option>
                        @foreach (var yearEntry in Model.OrderByDescending(x => x.Key))
                        {
                            <option value="@yearEntry.Key">@yearEntry.Key</option>
                        }
                    </select>
                </div>

                <br />

                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive" id="PrintPDF">
                            <table id="dataTable" class="display expandable-table" style="width:100%">
                                <thead>
                                    <tr>
                                        <th>Year</th>
                                        <th>Month</th>
                                        @foreach (var floor in Model.SelectMany(x => x.Value.SelectMany(y => y.Value.Keys)).Distinct())
                                        {
                                            <th>@floor</th>
                                        }
                                        <th>Total Profit</th> <!-- New column for total profit by month -->
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var yearEntry in Model.OrderByDescending(x => x.Key))
                                    {
                                        var year = yearEntry.Key;
                                        var months = yearEntry.Value.Keys.OrderByDescending(x => x).ToList();
                                        var allFloors = Model.SelectMany(x => x.Value.SelectMany(y => y.Value.Keys)).Distinct();

                                        foreach (var month in months)
                                        {
                                            <tr>
                                                <td>@year</td>
                                                <td>@month</td>
                                                @foreach (var floor in allFloors)
                                                {
                                                    <td>
                                                        @{
                                                            if (Model.ContainsKey(year) && Model[year].ContainsKey(month) && Model[year][month].ContainsKey(floor))
                                                            {
                                                                var profit = Model[year][month][floor];
                                                                if (profit < 0)
                                                                {
                                                                    <span class="negative-profit">@profit.ToString()</span>
                                                                }
                                                                else
                                                                {
                                                                    @profit.ToString()
                                                                }
                                                            }
                                                            else
                                                            {
                                                                <span>0</span>
                                                            }
                                                        }
                                                    </td>
                                                }
                                                <td>
                                                    @{
                                                        if (Model.ContainsKey(year) && Model[year].ContainsKey(month))
                                                        {
                                                            var totalProfit = Model[year][month].Values.Sum();
                                                            if (totalProfit < 0)
                                                            {
                                                                <span class="negative-profit">@totalProfit</span>
                                                            }
                                                            else
                                                            {
                                                                @totalProfit
                                                            }
                                                        }
                                                        else
                                                        {
                                                            @(0)
                                                        }
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>

                                <tfoot>
                                    <tr class="footer-row">
                                        <td>Total</td>
                                        <td></td>
                                        @foreach (var floor in Model.SelectMany(x => x.Value.SelectMany(y => y.Value.Keys)).Distinct())
                                        {
                                            <td>
                                                @{
                                                    var floorProfit = Model.SelectMany(x => x.Value).Where(d => d.Value.ContainsKey(floor)).Sum(d => d.Value[floor]);
                                                    if (floorProfit < 0)
                                                    {
                                                        <span class="negative-profit">@floorProfit</span>
                                                    }
                                                    else
                                                    {
                                                        @floorProfit
                                                    }
                                                }
                                            </td>
                                        }

                                        <td>
                                            @{
                                                var totalOverallProfit = Model.SelectMany(x => x.Value.SelectMany(y => y.Value.Values)).Sum(d => d);
                                                if (totalOverallProfit < 0)
                                                {
                                                    <span class="negative-profit">@totalOverallProfit</span>
                                                }
                                                else
                                                {
                                                    @totalOverallProfit
                                                }
                                            }
                                        </td>
                                    </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {

    @*<script src="https://code.jquery.com/jquery-3.5.1.js"></script>
        <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>*@
    <script src="https://cdn.datatables.net/buttons/2.3.6/js/dataTables.buttons.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.3/jszip.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/pdfmake.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/pdfmake/0.1.53/vfs_fonts.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.html5.min.js"></script>
    <script src="https://cdn.datatables.net/buttons/2.3.6/js/buttons.print.min.js"></script>

    <script>


        $(document).ready(function () {
            var currentDate = new Date().toISOString().slice(0, 10); // Get the current date in YYYY-MM-DD format

            $('#dataTable').DataTable({
                dom: '<"row"<"col-sm-3"l><"col-sm-6"f><"col-sm-3"B>>tip',
                buttons: [
                    {
                        extend: 'csv',
                        text: 'CSV',
                        filename: 'AR_Summary_' + currentDate,
                        footer: true

                    },
                    {
                        extend: 'excel',
                        text: 'Excel',
                        filename: 'AR_Summary_' + currentDate,
                        footer: true
                    },
                    {
                        extend: 'pdf',
                        text: 'PDF',
                        filename: 'AR_Summary_' + currentDate,
                        footer: true
                    },
                    {
                        extend: 'print',
                        text: 'Print',
                        footer: true
                    }
                ]
            });

            $('#yearFilter').on('change', function () {
                var year = $(this).val();

                if (year === "") {
                    table.column(0).search("").draw();
                } else {
                    table.column(0).search("^" + year + "$", true, false).draw();
                }
            });
        });
    </script>
}