@model AlphaZero.Models.finance

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>Finance</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.finance_id)

    <div class="form-group">
        @Html.LabelFor(model => model.floor_id, "Floor ID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("floor_id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.floor_id, "", new { @class = "text-danger" })
        </div>
    </div>

   

    <div class="form-group">
        @Html.LabelFor(model => model.finance_flowtype, "Flowtype", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.finance_flowtype, new SelectList(new[] { "Inflow", "Outflow" }), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.finance_flowtype, "", new { @class = "text-danger" })
        </div>
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.finance_inflow, "Inflow", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.finance_inflow, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.finance_inflow, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_outflow, "Outflow", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.finance_outflow, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.finance_outflow, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_desc, "Notes", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">

            @Html.EditorFor(model => model.finance_desc, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.finance_desc, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_pMethod, "Payment Method", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.finance_pMethod, GetPaymentMethodOptions(), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.finance_pMethod, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_type, "Payment", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownListFor(model => model.finance_type, GetPaymentOptions(), new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.finance_type, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_date, "Date", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.finance_date, "Date", new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.finance_date, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.finance_receipt, "Receipt", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.finance_receipt, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.finance_receipt, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.user_id, "User ID", htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.DropDownList("user_id", null, htmlAttributes: new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.user_id, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@functions {
    private SelectList GetPaymentMethodOptions()
    {
        var paymentMethods = new List<SelectListItem>
{
            new SelectListItem { Text = "Cash", Value = "Cash" },
            new SelectListItem { Text = "Credit card/Debit card", Value = "CreditCardDebitCard" },
            new SelectListItem { Text = "E-wallet", Value = "EWallet" }
        };

        return new SelectList(paymentMethods, "Value", "Text");
    }

    private SelectList GetPaymentOptions()
    {
        var paymentOptions = new List<SelectListItem>
{
            new SelectListItem { Text = "Full Payment", Value = "FullPayment" },
            new SelectListItem { Text = "Partial Payment", Value = "PartialPayment" }
        };

        return new SelectList(paymentOptions, "Value", "Text");
    }
}

@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>$(document).ready(function () {
            var flowTypeDropdown = $("#finance_flowtype");
            var inflowField = $("#finance_inflow");
            var outflowField = $("#finance_outflow");

            // Initially disable both Inflow and Outflow fields
            inflowField.prop("disabled", false);
            outflowField.prop("disabled", true);

            // Enable/disable Inflow and Outflow fields based on Flowtype dropdown selection
            flowTypeDropdown.on("change", function () {
                var selectedFlowType = $(this).val();

                if (selectedFlowType === "Inflow") {
                    inflowField.prop("disabled", false);
                    outflowField.prop("disabled", true);
                    outflowField.val("");
                } else if (selectedFlowType === "Outflow") {
                    inflowField.prop("disabled", true);
                    inflowField.val("");
                    outflowField.prop("disabled", false);
                }
            });
        });</script>
}
