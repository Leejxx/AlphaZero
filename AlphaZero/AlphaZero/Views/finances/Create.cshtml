@model AlphaZero.Models.finance

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>

@using (Html.BeginForm("Create", "finances", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4>Finance</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.floor_id, "Floor ID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("floor_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.floor_id, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-10">
                Date
                @Html.EditorFor(model => model.finance_date, "Date", new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.finance_date, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.finance_flowtype, "Flowtype", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.finance_flowtype, new SelectList(new[] { "Masuk", "Keluar" }), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.finance_flowtype, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                Masuk
                @Html.EditorFor(model => model.finance_inflow, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.finance_inflow, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                Keluar
                @Html.EditorFor(model => model.finance_outflow, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.finance_outflow, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-10">
                Notes
                @Html.EditorFor(model => model.finance_desc, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.finance_desc, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.finance_pMethod, "Payment Method", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.finance_pMethod, GetPaymentMethodOptions(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.finance_pMethod, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label("Receipt", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <input type="file" name="ReceiptFile" id="ReceiptFile" onchange="previewReceipt(this)" accept="image/*" />
                <br />
                <img id="receiptPreview" src="#" alt="Receipt Preview" style="max-height: 200px; display: none;" />
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.finance_type, "Payment", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.finance_type, GetPaymentOptions(), new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.finance_type, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.user_id, "User ID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("user_id", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.user_id, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-primary" />
            </div>
        </div>
    </div>
}

@section scripts {
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script>
        function previewReceipt(input) {
            if (input.files && input.files[0]) {
                var reader = new FileReader();
                reader.onload = function (e) {
                    $('#receiptPreview').attr('src', e.target.result);
                    $('#receiptPreview').show();
                };
                reader.readAsDataURL(input.files[0]);
            } else {
                $('#receiptPreview').attr('src', '#');
                $('#receiptPreview').hide();
            }
        }

        $(document).ready(function () {
            var flowTypeDropdown = $("#finance_flowtype");
            var inflowField = $("#finance_inflow");
            var outflowField = $("#finance_outflow");

            // Initially disable both Inflow and Outflow fields
            inflowField.prop("disabled", false);
            outflowField.prop("disabled", true);

            // Enable/disable Inflow and Outflow fields based on Flowtype dropdown selection
            flowTypeDropdown.on("change", function () {
                var selectedFlowType = $(this).val();

                if (selectedFlowType === "Masuk") {
                    inflowField.prop("disabled", false);
                    outflowField.prop("disabled", true);
                    outflowField.val("");
                } else if (selectedFlowType === "Keluar") {
                    inflowField.prop("disabled", true);
                    inflowField.val("");
                    outflowField.prop("disabled", false);
                }
            });
        });
    </script>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@functions {
    private SelectList GetPaymentMethodOptions()
    {
        var paymentMethods = new List<SelectListItem>
{
            new SelectListItem { Text = "Cash", Value = "Cash" },
            new SelectListItem { Text = "Bank", Value = "Bank" }
        };

        return new SelectList(paymentMethods, "Value", "Text");
    }

    private SelectList GetPaymentOptions()
    {
        var paymentOptions = new List<SelectListItem>
{
            new SelectListItem { Text = "Full Payment", Value = "FullPayment" },
            new SelectListItem { Text = "Partial Payment", Value = "PartialPayment" }
        };

        return new SelectList(paymentOptions, "Value", "Text");
    }
}