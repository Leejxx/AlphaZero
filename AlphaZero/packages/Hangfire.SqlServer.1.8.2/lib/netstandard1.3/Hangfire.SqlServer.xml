<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hangfire.SqlServer</name>
    </assembly>
    <members>
        <member name="T:Hangfire.SqlServer.SqlServerMonitoringApi.SafeDictionary`2">
            <summary>
            Overloaded dictionary that doesn't throw if given an invalid key
            Fixes issues such as https://github.com/HangfireIO/Hangfire/issues/871
            </summary>
        </member>
        <member name="M:Hangfire.SqlServer.SqlServerStorage.#ctor(System.String,Hangfire.SqlServer.SqlServerStorageOptions)">
            <summary>
            Initializes SqlServerStorage from the provided SqlServerStorageOptions and either the provided connection
            string or the connection string with provided name pulled from the application config file.       
            </summary>
            <param name="nameOrConnectionString">Either a SQL Server connection string or the name of 
            a SQL Server connection string located in the connectionStrings node in the application config</param>
            <param name="options"></param>
            <exception cref="T:System.ArgumentNullException"><paramref name="nameOrConnectionString"/> argument is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="options"/> argument is null.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="nameOrConnectionString"/> argument is neither 
            a valid SQL Server connection string nor the name of a connection string in the application
            config file.</exception>
        </member>
        <member name="M:Hangfire.SqlServer.SqlServerStorage.#ctor(System.Data.Common.DbConnection)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.SqlServer.SqlServerStorage"/> class with
            explicit instance of the <see cref="T:System.Data.Common.DbConnection"/> class that will be used
            to query the data.
            </summary>
        </member>
        <member name="M:Hangfire.SqlServer.SqlServerStorage.#ctor(System.Data.Common.DbConnection,Hangfire.SqlServer.SqlServerStorageOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.SqlServer.SqlServerStorage"/> class with
            explicit instance of the <see cref="T:System.Data.Common.DbConnection"/> class that will be used
            to query the data, with the given options.
            </summary>
        </member>
        <member name="M:Hangfire.SqlServer.SqlServerStorage.#ctor(System.Func{System.Data.Common.DbConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.SqlServer.SqlServerStorage"/> class with
            a connection factory <see cref="T:System.Func`1"/> class that will be invoked
            to create new database connections for querying the data.
            </summary>
        </member>
        <member name="M:Hangfire.SqlServer.SqlServerStorage.#ctor(System.Func{System.Data.Common.DbConnection},Hangfire.SqlServer.SqlServerStorageOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:Hangfire.SqlServer.SqlServerStorage"/> class with
            a connection factory <see cref="T:System.Func`1"/> class that will be invoked
            to create new database connections for querying the data.
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.UseIgnoreDupKeyOption">
            <summary>
            Gets or sets whether IGNORE_DUP_KEY was applied to [Hash] and [Set] tables and so MERGE
            statements can be replaced by much more efficient INSERT/UPDATE pair. This option allows
            to avoid deadlocks related to SERIALIZABLE-level range locks without introducing transient
            errors due to concurrency.
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.DeleteExpiredBatchSize">
            <summary>
            Gets or sets the number of records deleted in a single batch in expiration manager. Default
            value is 1000, but it can be configured to a higher one when processing throughput is high
            enough, so expiration manager becomes the bottleneck.
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.UseTransactionalAcknowledge">
            <summary>
            Gets or sets whether to enable experimental feature of transactional acknowledge of completed
            background jobs. In this case there will be less requests sent to SQL Server and better handling
            of data loss when asynchronous replication is used. But additional blocking on the JobQueue table
            is expected, since transaction commit requires an explicit Commit request to be sent. 
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.SqlClientFactory">
            <summary>
            Gets or sets the <see cref="T:System.Data.Common.DbProviderFactory"/> for creating <c>SqlConnection</c> instances.
            Defaults to either <c>System.Data.SqlClient.SqlClientFactory.Instance</c> or
            <c>Microsoft.Data.SqlClient.SqlClientFactory</c> depending on which package reference exists
            on the consuming project.
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.TryAutoDetectSchemaDependentOptions">
            <summary>
            Gets or sets whether to try automatically query for the current schema on application start
            and enable <see cref="P:Hangfire.SqlServer.SqlServerStorageOptions.UseIgnoreDupKeyOption"/>, <see cref="P:Hangfire.SqlServer.SqlServerStorageOptions.DeleteExpiredBatchSize"/> and
            <see cref="P:Hangfire.SqlServer.SqlServerStorageOptions.DisableGlobalLocks"/> options depending on the current schema version. When storage
            is inaccessible on startup, default values will be used for those options.
            </summary>
        </member>
        <member name="P:Hangfire.SqlServer.SqlServerStorageOptions.DefaultQueueProvider">
            <summary>
            Gets or sets a default queue provider that will be used when no special provider was
            registered for a particular queue.
            </summary>
        </member>
    </members>
</doc>
